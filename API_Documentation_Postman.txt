================================================================================
                    DOCUMENTACIÓN DE APIs - PROYECTO CODERHOUSE
                    ================================================

INFORMACIÓN GENERAL
==================
- Nombre del Proyecto: CoderHouse Backend API
- Descripción: API para gestión de productos y carritos de compra
- Base URL: http://localhost:8080
- Content-Type: application/json
- Framework: Express.js

ENDPOINTS DISPONIBLES
====================

1. RUTA DE PRUEBA
-----------------
GET /
- Descripción: Verificar que la API esté funcionando
- URL: http://localhost:8080/
- Método: GET
- Headers: Ninguno requerido
- Body: No aplica
- Respuesta esperada:
  {
    "message": "API de Productos y Carritos funcionando correctamente",
    "endpoints": {
      "products": "/api/products",
      "carts": "/api/carts"
    }
  }

2. ENDPOINTS DE PRODUCTOS (/api/products)
=========================================

2.1. LISTAR TODOS LOS PRODUCTOS
-------------------------------
GET /api/products
- Descripción: Obtener todos los productos disponibles
- URL: http://localhost:8080/api/products
- Método: GET
- Headers: Ninguno requerido
- Body: No aplica
- Respuesta esperada:
  {
    "status": "success",
    "data": [
      {
        "id": "1",
        "title": "Producto Ejemplo",
        "description": "Descripción del producto",
        "code": "PROD001",
        "price": 100,
        "status": true,
        "stock": 10,
        "category": "Electrónicos",
        "thumbnails": []
      }
    ],
    "total": 1
  }

2.2. OBTENER PRODUCTO POR ID
----------------------------
GET /api/products/:pid
- Descripción: Obtener un producto específico por su ID
- URL: http://localhost:8080/api/products/1
- Método: GET
- Parámetros de URL: pid (ID del producto)
- Headers: Ninguno requerido
- Body: No aplica
- Respuesta esperada:
  {
    "status": "success",
    "data": {
      "id": "1",
      "title": "Producto Ejemplo",
      "description": "Descripción del producto",
      "code": "PROD001",
      "price": 100,
      "status": true,
      "stock": 10,
      "category": "Electrónicos",
      "thumbnails": []
    }
  }

2.3. CREAR NUEVO PRODUCTO
-------------------------
POST /api/products
- Descripción: Crear un nuevo producto
- URL: http://localhost:8080/api/products
- Método: POST
- Headers: Content-Type: application/json
- Body (JSON):
  {
    "title": "Nuevo Producto",
    "description": "Descripción del nuevo producto",
    "code": "PROD002",
    "price": 150,
    "stock": 20,
    "category": "Ropa",
    "status": true,
    "thumbnails": ["url1.jpg", "url2.jpg"]
  }
- Campos requeridos: title, description, code, price, stock, category
- Respuesta esperada:
  {
    "status": "success",
    "message": "Producto creado exitosamente",
    "data": {
      "id": "2",
      "title": "Nuevo Producto",
      "description": "Descripción del nuevo producto",
      "code": "PROD002",
      "price": 150,
      "stock": 20,
      "category": "Ropa",
      "status": true,
      "thumbnails": ["url1.jpg", "url2.jpg"]
    }
  }

2.4. ACTUALIZAR PRODUCTO
------------------------
PUT /api/products/:pid
- Descripción: Actualizar un producto existente
- URL: http://localhost:8080/api/products/1
- Método: PUT
- Parámetros de URL: pid (ID del producto)
- Headers: Content-Type: application/json
- Body (JSON):
  {
    "title": "Producto Actualizado",
    "price": 200,
    "stock": 15
  }
- Respuesta esperada:
  {
    "status": "success",
    "message": "Producto actualizado exitosamente",
    "data": {
      "id": "1",
      "title": "Producto Actualizado",
      "description": "Descripción del producto",
      "code": "PROD001",
      "price": 200,
      "status": true,
      "stock": 15,
      "category": "Electrónicos",
      "thumbnails": []
    }
  }

2.5. ELIMINAR PRODUCTO
----------------------
DELETE /api/products/:pid
- Descripción: Eliminar un producto
- URL: http://localhost:8080/api/products/1
- Método: DELETE
- Parámetros de URL: pid (ID del producto)
- Headers: Ninguno requerido
- Body: No aplica
- Respuesta esperada:
  {
    "status": "success",
    "message": "Producto eliminado exitosamente",
    "data": {
      "id": "1",
      "title": "Producto Ejemplo",
      "description": "Descripción del producto",
      "code": "PROD001",
      "price": 100,
      "status": true,
      "stock": 10,
      "category": "Electrónicos",
      "thumbnails": []
    }
  }

2.6. OBTENER PRODUCTOS POR CATEGORÍA
-----------------------------------
GET /api/products/category/:category
- Descripción: Obtener productos filtrados por categoría
- URL: http://localhost:8080/api/products/category/Electrónicos
- Método: GET
- Parámetros de URL: category (nombre de la categoría)
- Headers: Ninguno requerido
- Body: No aplica
- Respuesta esperada:
  {
    "status": "success",
    "data": [
      {
        "id": "1",
        "title": "Producto Ejemplo",
        "description": "Descripción del producto",
        "code": "PROD001",
        "price": 100,
        "status": true,
        "stock": 10,
        "category": "Electrónicos",
        "thumbnails": []
      }
    ],
    "total": 1,
    "category": "Electrónicos"
  }

2.7. OBTENER PRODUCTOS POR RANGO DE PRECIO
-----------------------------------------
GET /api/products/price-range?min=50&max=200
- Descripción: Obtener productos filtrados por rango de precio
- URL: http://localhost:8080/api/products/price-range?min=50&max=200
- Método: GET
- Query Parameters: 
  - min: precio mínimo (opcional, default: 0)
  - max: precio máximo (opcional, default: infinito)
- Headers: Ninguno requerido
- Body: No aplica
- Respuesta esperada:
  {
    "status": "success",
    "data": [
      {
        "id": "1",
        "title": "Producto Ejemplo",
        "description": "Descripción del producto",
        "code": "PROD001",
        "price": 100,
        "status": true,
        "stock": 10,
        "category": "Electrónicos",
        "thumbnails": []
      }
    ],
    "total": 1,
    "priceRange": {
      "min": 50,
      "max": 200
    }
  }

3. ENDPOINTS DE CARRITOS (/api/carts)
=====================================

3.1. LISTAR TODOS LOS CARRITOS
-----------------------------
GET /api/carts
- Descripción: Obtener todos los carritos
- URL: http://localhost:8080/api/carts
- Método: GET
- Headers: Ninguno requerido
- Body: No aplica
- Respuesta esperada:
  {
    "status": "success",
    "data": [
      {
        "id": "1",
        "products": [
          {
            "product": "1",
            "quantity": 2
          }
        ]
      }
    ],
    "total": 1
  }

3.2. CREAR NUEVO CARRITO
-----------------------
POST /api/carts
- Descripción: Crear un nuevo carrito vacío
- URL: http://localhost:8080/api/carts
- Método: POST
- Headers: Content-Type: application/json
- Body: No aplica (carrito vacío)
- Respuesta esperada:
  {
    "status": "success",
    "message": "Carrito creado exitosamente",
    "data": {
      "id": "2",
      "products": []
    }
  }

3.3. OBTENER CARRITO POR ID CON PRODUCTOS COMPLETOS
-------------------------------------------------
GET /api/carts/:cid
- Descripción: Obtener un carrito específico con información completa de productos
- URL: http://localhost:8080/api/carts/1
- Método: GET
- Parámetros de URL: cid (ID del carrito)
- Headers: Ninguno requerido
- Body: No aplica
- Respuesta esperada:
  {
    "status": "success",
    "data": {
      "id": "1",
      "products": [
        {
          "product": {
            "id": "1",
            "title": "Producto Ejemplo",
            "description": "Descripción del producto",
            "code": "PROD001",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "Electrónicos",
            "thumbnails": []
          },
          "quantity": 2
        }
      ]
    }
  }

3.4. AGREGAR PRODUCTO AL CARRITO
-------------------------------
POST /api/carts/:cid/product/:pid
- Descripción: Agregar un producto al carrito
- URL: http://localhost:8080/api/carts/1/product/1
- Método: POST
- Parámetros de URL: 
  - cid: ID del carrito
  - pid: ID del producto
- Headers: Content-Type: application/json
- Body (JSON):
  {
    "quantity": 3
  }
- Respuesta esperada:
  {
    "status": "success",
    "message": "Producto agregado al carrito exitosamente",
    "data": {
      "id": "1",
      "products": [
        {
          "product": "1",
          "quantity": 5
        }
      ]
    }
  }

3.5. ACTUALIZAR CANTIDAD DE PRODUCTO EN EL CARRITO
-------------------------------------------------
PUT /api/carts/:cid/product/:pid
- Descripción: Actualizar la cantidad de un producto en el carrito
- URL: http://localhost:8080/api/carts/1/product/1
- Método: PUT
- Parámetros de URL: 
  - cid: ID del carrito
  - pid: ID del producto
- Headers: Content-Type: application/json
- Body (JSON):
  {
    "quantity": 4
  }
- Respuesta esperada:
  {
    "status": "success",
    "message": "Cantidad actualizada exitosamente",
    "data": {
      "id": "1",
      "products": [
        {
          "product": "1",
          "quantity": 4
        }
      ]
    }
  }

3.6. ELIMINAR PRODUCTO DEL CARRITO
---------------------------------
DELETE /api/carts/:cid/product/:pid
- Descripción: Eliminar un producto específico del carrito
- URL: http://localhost:8080/api/carts/1/product/1
- Método: DELETE
- Parámetros de URL: 
  - cid: ID del carrito
  - pid: ID del producto
- Headers: Ninguno requerido
- Body: No aplica
- Respuesta esperada:
  {
    "status": "success",
    "message": "Producto eliminado del carrito exitosamente",
    "data": {
      "id": "1",
      "products": []
    }
  }

3.7. VACIAR CARRITO
------------------
DELETE /api/carts/:cid
- Descripción: Vaciar todos los productos del carrito
- URL: http://localhost:8080/api/carts/1
- Método: DELETE
- Parámetros de URL: cid (ID del carrito)
- Headers: Ninguno requerido
- Body: No aplica
- Respuesta esperada:
  {
    "status": "success",
    "message": "Carrito vaciado exitosamente",
    "data": {
      "id": "1",
      "products": []
    }
  }

CÓDIGOS DE ESTADO HTTP
======================
- 200: OK - Operación exitosa
- 201: Created - Recurso creado exitosamente
- 400: Bad Request - Datos inválidos o faltantes
- 404: Not Found - Recurso no encontrado
- 500: Internal Server Error - Error interno del servidor

ESTRUCTURA DE RESPUESTAS
========================
Todas las respuestas siguen este formato:
{
  "status": "success" | "error",
  "message": "Mensaje descriptivo" (solo en casos de error o confirmación),
  "data": { ... } | [ ... ] (datos de la respuesta)
}

CONFIGURACIÓN EN POSTMAN
========================
1. Crear una nueva colección llamada "CoderHouse API"
2. Configurar una variable de entorno:
   - Variable: baseUrl
   - Valor inicial: http://localhost:8080
3. En cada request, usar {{baseUrl}} como prefijo de la URL
4. Para requests POST/PUT, configurar el header:
   - Key: Content-Type
   - Value: application/json

EJEMPLOS DE USO EN POSTMAN
==========================

1. Crear un producto:
   - Method: POST
   - URL: {{baseUrl}}/api/products
   - Body (raw JSON):
   {
     "title": "Laptop Gaming",
     "description": "Laptop para gaming de alto rendimiento",
     "code": "LAP001",
     "price": 1500,
     "stock": 5,
     "category": "Electrónicos",
     "thumbnails": ["laptop1.jpg", "laptop2.jpg"]
   }

2. Crear un carrito:
   - Method: POST
   - URL: {{baseUrl}}/api/carts

3. Agregar producto al carrito:
   - Method: POST
   - URL: {{baseUrl}}/api/carts/1/product/1
   - Body (raw JSON):
   {
     "quantity": 2
   }

4. Obtener carrito con productos:
   - Method: GET
   - URL: {{baseUrl}}/api/carts/1

NOTAS IMPORTANTES
=================
- Todos los IDs son strings
- Los precios deben ser números positivos
- El stock debe ser un número entero positivo
- Las cantidades en el carrito deben ser números enteros positivos
- Si se actualiza la cantidad de un producto a 0 o menos, se elimina del carrito
- Los productos deben tener todos los campos requeridos al crearlos

================================================================================
